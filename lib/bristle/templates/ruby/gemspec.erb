# frozen_string_literal: true

#
# Generated by bristle. Changes outside the custom configuration section will be overwritten.
#
require "json"
require "pathname"
<%-
def for_gemspec(requirement)
  v = requirement.as_list
  (v.size == 1 ? v.first : v).to_json
end
-%>

Gem::Specification.new do |spec|
  raise "RubyGems 2.0 or newer is required." unless spec.respond_to?(:metadata)

  spec.name = <%= project.name.to_json %>
  spec.version = <%= project.version.to_json %>
  spec.summary = <%= project.summary.to_json %>

  spec.required_ruby_version = <%= for_gemspec(project.language.required_version) %>

  <%- if project.license %>
  spec.licenses = [<%= project.license.id.to_json %>]
  <%- end %>
  spec.authors = [<%= project.developers.values.map {|d| d.name.to_json}.join(", ") %>]
  spec.email = [<%= project.developers.values.map {|d| d.email.to_json}.join(", ") %>]
  <%- if project.homepage_url %>
  spec.homepage = <%= project.homepage_url.to_s.to_json %>
  <%- end %>

  <%- if project.ticket_system_url %>
  spec.metadata["issue_tracker"] = <%= project.ticket_system_url.to_s.to_json %>
  <%- end %>
  <%- if project.documentation_url %>
  spec.metadata["documentation"] = <%= project.documentation_url.to_s.to_json %>
  <%- end %>
  <%- if project.source_code_url %>
  spec.metadata["source_code"] = <%= project.source_code_url.to_s.to_json %>
  <%- end %>
  <%- if project.wiki_url %>
  spec.metadata["wiki"] = <%= project.wiki_url.to_s.to_json %>
  <%- end %>

  spec.files = Dir[
  <% project.packagers[:gem].files.select { |_, enabled| enabled }.each do |file, _| %>
    <%= file.to_json%>,
  <% end %>
  ]

  spec.require_paths = [
  <% project.packagers[:gem].require_paths.select { |_, enabled| enabled }.each do |path, _| %>
    <%= path.to_json%>,
  <% end %>
  ]
  <%- if (project.dir + "cmd").exist? %>

  spec.bindir = "cmd"
  spec.executables = spec.files.filter { |f| File.dirname(f) == "cmd" && File.file?(f) }.map { |f| File.basename(f) }
  <%- end %>
  <%- d = project.dependencies.values.select {|d| d.type == :runtime }; unless d.empty? %>

  <%- d.sort {|a, b| a.id <=> b.id}.each do |d| %>
  spec.add_dependency <%= d.id.to_json %>, <%= for_gemspec(d.version) %>
  <%- end %>
  <%- end %>
  <%- d = project.dependencies.values.select {|d| d.type == :development }; unless d.empty? %>

  <%- d.sort {|a, b| a.id <=> b.id}.each do |d| %>
  spec.add_development_dependency <%= d.id.to_json %>, <%= for_gemspec(d.version) %>
  <%- end %>
  <%- end %>

  # >>> Custom configuration
<%= custom[:default] %>
  # <<< Custom configuration
end
